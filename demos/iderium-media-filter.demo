with Ada.Numerics.Elementary_Functions;
with Ada.Numerics.Generic_Real_Arrays;
with Ada.Text_IO;
with Iderium.Media.Filter;
with Iderium.Media.Frame;
with Iderium.Media.Signal;

procedure Demo is

   -- This time we work with floating point signals.
   package Signal is
     new Iderium.Media.Signal (Float);

   -- Noisy exponentially fading sine wave.
   type Wave is new Signal.Instance with
      record
         X : Float := 0.0;
      end record;

   -- Quite simple.
   overriding
   procedure Capture (W : in out Wave) is
      use Ada.Numerics.Elementary_Functions;
   begin
      W.X := W.X + 0.1;
      W.Active := W.X < 10.0;
      if W.Active then
         W.Sample := Exp (-0.2 * W.X) * Sin (W.X) +       -- Original.
                                  0.1 * Sin (10.0 * W.X); -- Noise.
      end if;
   end Capture;

   package Arrays is new Ada.Numerics.Generic_Real_Arrays (Float);

   package Simple_Filter is new Iderium.Media.Filter (Arrays => Arrays,
                                                      Signal => Signal);

   procedure Print (S : in out Signal.Instance'Class) is
   begin
      loop
         Signal.Capture (S);
         exit when not S.Active;
         Ada.Text_IO.Put_Line (S.Sample'Img);
      end loop;
   end Print;

   -- Should be aliased, because we need to be able to access it.
   Input   : aliased Wave;
   -- A simple first-order recursive filter:
   --   out = alpha * in + (1 - alpha) * previousOut.
   Alpha   : constant := 0.1;
   Example : Simple_Filter.Instance_Access := 
     new Simple_Filter.Instance'(M => 0,
                                 N => 1,
                                 A => Alpha,
                                 C => (1 => 1.0 - Alpha),
                            others => <>);
   Example_Resource : Simple_Filter.Resource.Instance := 
     Simple_Filter.Resource.Create (Example);
   Example_Output   : Simple_Filter.Output (Example, Input'Access);

begin
   -- Clear the buffers.
   Simple_Filter.Buffer.Put (Example.I, (1 .. Example.M => 0.0));
   Simple_Filter.Buffer.Put (Example.F, (1 .. Example.N => 0.0));
   -- Print the result.
   Print (Example_Output);
end Demo;
